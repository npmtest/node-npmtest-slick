{"/home/travis/build/npmtest/node-npmtest-slick/test.js":"/* istanbul instrument in package npmtest_slick */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slick/lib.npmtest_slick.js":"/* istanbul instrument in package npmtest_slick */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_slick = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_slick = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-slick/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-slick && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_slick */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_slick\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_slick.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_slick.rollup.js'] =\n            local.assetsDict['/assets.npmtest_slick.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_slick.__dirname + '/lib.npmtest_slick.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slick/node_modules/slick/index.js":"/*\r\nslick\r\n*/\"use strict\"\r\n\r\nmodule.exports = \"document\" in global ? require(\"./finder\") : { parse: require(\"./parser\") }\r\n","/home/travis/build/npmtest/node-npmtest-slick/node_modules/slick/parser.js":"/*\r\nSlick Parser\r\n - originally created by the almighty Thomas Aylott <@subtlegradient> (http://subtlegradient.com)\r\n*/\"use strict\"\r\n\r\n// Notable changes from Slick.Parser 1.0.x\r\n\r\n// The parser now uses 2 classes: Expressions and Expression\r\n// `new Expressions` produces an array-like object containing a list of Expression objects\r\n// - Expressions::toString() produces a cleaned up expressions string\r\n// `new Expression` produces an array-like object\r\n// - Expression::toString() produces a cleaned up expression string\r\n// The only exposed method is parse, which produces a (cached) `new Expressions` instance\r\n// parsed.raw is no longer present, use .toString()\r\n// parsed.expression is now useless, just use the indices\r\n// parsed.reverse() has been removed for now, due to its apparent uselessness\r\n// Other changes in the Expressions object:\r\n// - classNames are now unique, and save both escaped and unescaped values\r\n// - attributes now save both escaped and unescaped values\r\n// - pseudos now save both escaped and unescaped values\r\n\r\nvar escapeRe   = /([-.*+?^${}()|[\\]\\/\\\\])/g,\r\n    unescapeRe = /\\\\/g\r\n\r\nvar escape = function(string){\r\n    // XRegExp v2.0.0-beta-3\r\n    // « https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js\r\n    return (string + \"\").replace(escapeRe, '\\\\$1')\r\n}\r\n\r\nvar unescape = function(string){\r\n    return (string + \"\").replace(unescapeRe, '')\r\n}\r\n\r\nvar slickRe = RegExp(\r\n/*\r\n#!/usr/bin/env ruby\r\nputs \"\\t\\t\" + DATA.read.gsub(/\\(\\?x\\)|\\s+#.*$|\\s+|\\\\$|\\\\n/,'')\r\n__END__\r\n    \"(?x)^(?:\\\r\n      \\\\s* ( , ) \\\\s*               # Separator          \\n\\\r\n    | \\\\s* ( <combinator>+ ) \\\\s*   # Combinator         \\n\\\r\n    |      ( \\\\s+ )                 # CombinatorChildren \\n\\\r\n    |      ( <unicode>+ | \\\\* )     # Tag                \\n\\\r\n    | \\\\#  ( <unicode>+       )     # ID                 \\n\\\r\n    | \\\\.  ( <unicode>+       )     # ClassName          \\n\\\r\n    |                               # Attribute          \\n\\\r\n    \\\\[  \\\r\n        \\\\s* (<unicode1>+)  (?:  \\\r\n            \\\\s* ([*^$!~|]?=)  (?:  \\\r\n                \\\\s* (?:\\\r\n                    ([\\\"']?)(.*?)\\\\9 \\\r\n                )\\\r\n            )  \\\r\n        )?  \\\\s*  \\\r\n    \\\\](?!\\\\]) \\n\\\r\n    |   :+ ( <unicode>+ )(?:\\\r\n    \\\\( (?:\\\r\n        (?:([\\\"'])([^\\\\12]*)\\\\12)|((?:\\\\([^)]+\\\\)|[^()]*)+)\\\r\n    ) \\\\)\\\r\n    )?\\\r\n    )\"\r\n*/\r\n\"^(?:\\\\s*(,)\\\\s*|\\\\s*(<combinator>+)\\\\s*|(\\\\s+)|(<unicode>+|\\\\*)|\\\\#(<unicode>+)|\\\\.(<unicode>+)|\\\\[\\\\s*(<unicode1>+)(?:\\\\s*([*^$!~|]?=)(?:\\\\s*(?:([\\\"']?)(.*?)\\\\9)))?\\\\s*\\\\](?!\\\\])|(:+)(<unicode>+)(?:\\\\((?:(?:([\\\"'])([^\\\\13]*)\\\\13)|((?:\\\\([^)]+\\\\)|[^()]*)+))\\\\))?)\"\r\n    .replace(/<combinator>/, '[' + escape(\">+~`!@$%^&={}\\\\;</\") + ']')\r\n    .replace(/<unicode>/g, '(?:[\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n    .replace(/<unicode1>/g, '(?:[:\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n)\r\n\r\n// Part\r\n\r\nvar Part = function Part(combinator){\r\n    this.combinator = combinator || \" \"\r\n    this.tag = \"*\"\r\n}\r\n\r\nPart.prototype.toString = function(){\r\n\r\n    if (!this.raw){\r\n\r\n        var xpr = \"\", k, part\r\n\r\n        xpr += this.tag || \"*\"\r\n        if (this.id) xpr += \"#\" + this.id\r\n        if (this.classes) xpr += \".\" + this.classList.join(\".\")\r\n        if (this.attributes) for (k = 0; part = this.attributes[k++];){\r\n            xpr += \"[\" + part.name + (part.operator ? part.operator + '\"' + part.value + '\"' : '') + \"]\"\r\n        }\r\n        if (this.pseudos) for (k = 0; part = this.pseudos[k++];){\r\n            xpr += \":\" + part.name\r\n            if (part.value) xpr += \"(\" + part.value + \")\"\r\n        }\r\n\r\n        this.raw = xpr\r\n\r\n    }\r\n\r\n    return this.raw\r\n}\r\n\r\n// Expression\r\n\r\nvar Expression = function Expression(){\r\n    this.length = 0\r\n}\r\n\r\nExpression.prototype.toString = function(){\r\n\r\n    if (!this.raw){\r\n\r\n        var xpr = \"\"\r\n\r\n        for (var j = 0, bit; bit = this[j++];){\r\n            if (j !== 1) xpr += \" \"\r\n            if (bit.combinator !== \" \") xpr += bit.combinator + \" \"\r\n            xpr += bit\r\n        }\r\n\r\n        this.raw = xpr\r\n\r\n    }\r\n\r\n    return this.raw\r\n}\r\n\r\nvar replacer = function(\r\n    rawMatch,\r\n\r\n    separator,\r\n    combinator,\r\n    combinatorChildren,\r\n\r\n    tagName,\r\n    id,\r\n    className,\r\n\r\n    attributeKey,\r\n    attributeOperator,\r\n    attributeQuote,\r\n    attributeValue,\r\n\r\n    pseudoMarker,\r\n    pseudoClass,\r\n    pseudoQuote,\r\n    pseudoClassQuotedValue,\r\n    pseudoClassValue\r\n){\r\n\r\n    var expression, current\r\n\r\n    if (separator || !this.length){\r\n        expression = this[this.length++] = new Expression\r\n        if (separator) return ''\r\n    }\r\n\r\n    if (!expression) expression = this[this.length - 1]\r\n\r\n    if (combinator || combinatorChildren || !expression.length){\r\n        current = expression[expression.length++] = new Part(combinator)\r\n    }\r\n\r\n    if (!current) current = expression[expression.length - 1]\r\n\r\n    if (tagName){\r\n\r\n        current.tag = unescape(tagName)\r\n\r\n    } else if (id){\r\n\r\n        current.id = unescape(id)\r\n\r\n    } else if (className){\r\n\r\n        var unescaped = unescape(className)\r\n\r\n        var classes = current.classes || (current.classes = {})\r\n        if (!classes[unescaped]){\r\n            classes[unescaped] = escape(className)\r\n            var classList = current.classList || (current.classList = [])\r\n            classList.push(unescaped)\r\n            classList.sort()\r\n        }\r\n\r\n    } else if (pseudoClass){\r\n\r\n        pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue\r\n\r\n        ;(current.pseudos || (current.pseudos = [])).push({\r\n            type         : pseudoMarker.length == 1 ? 'class' : 'element',\r\n            name         : unescape(pseudoClass),\r\n            escapedName  : escape(pseudoClass),\r\n            value        : pseudoClassValue ? unescape(pseudoClassValue) : null,\r\n            escapedValue : pseudoClassValue ? escape(pseudoClassValue) : null\r\n        })\r\n\r\n    } else if (attributeKey){\r\n\r\n        attributeValue = attributeValue ? escape(attributeValue) : null\r\n\r\n        ;(current.attributes || (current.attributes = [])).push({\r\n            operator     : attributeOperator,\r\n            name         : unescape(attributeKey),\r\n            escapedName  : escape(attributeKey),\r\n            value        : attributeValue ? unescape(attributeValue) : null,\r\n            escapedValue : attributeValue ? escape(attributeValue) : null\r\n        })\r\n\r\n    }\r\n\r\n    return ''\r\n\r\n}\r\n\r\n// Expressions\r\n\r\nvar Expressions = function Expressions(expression){\r\n    this.length = 0\r\n\r\n    var self = this\r\n\r\n    var original = expression, replaced\r\n\r\n    while (expression){\r\n        replaced = expression.replace(slickRe, function(){\r\n            return replacer.apply(self, arguments)\r\n        })\r\n        if (replaced === expression) throw new Error(original + ' is an invalid expression')\r\n        expression = replaced\r\n    }\r\n}\r\n\r\nExpressions.prototype.toString = function(){\r\n    if (!this.raw){\r\n        var expressions = []\r\n        for (var i = 0, expression; expression = this[i++];) expressions.push(expression)\r\n        this.raw = expressions.join(\", \")\r\n    }\r\n\r\n    return this.raw\r\n}\r\n\r\nvar cache = {}\r\n\r\nvar parse = function(expression){\r\n    if (expression == null) return null\r\n    expression = ('' + expression).replace(/^\\s+|\\s+$/g, '')\r\n    return cache[expression] || (cache[expression] = new Expressions(expression))\r\n}\r\n\r\nmodule.exports = parse\r\n","/home/travis/build/npmtest/node-npmtest-slick/node_modules/slick/finder.js":"/*\r\nSlick Finder\r\n*/\"use strict\"\r\n\r\n// Notable changes from Slick.Finder 1.0.x\r\n\r\n// faster bottom -> up expression matching\r\n// prefers mental sanity over *obsessive compulsive* milliseconds savings\r\n// uses prototypes instead of objects\r\n// tries to use matchesSelector smartly, whenever available\r\n// can populate objects as well as arrays\r\n// lots of stuff is broken or not implemented\r\n\r\nvar parse = require(\"./parser\")\r\n\r\n// utilities\r\n\r\nvar index = 0,\r\n    counter = document.__counter = (parseInt(document.__counter || -1, 36) + 1).toString(36),\r\n    key = \"uid:\" + counter\r\n\r\nvar uniqueID = function(n, xml){\r\n    if (n === window) return \"window\"\r\n    if (n === document) return \"document\"\r\n    if (n === document.documentElement) return \"html\"\r\n\r\n    if (xml) {\r\n        var uid = n.getAttribute(key)\r\n        if (!uid) {\r\n            uid = (index++).toString(36)\r\n            n.setAttribute(key, uid)\r\n        }\r\n        return uid\r\n    } else {\r\n        return n[key] || (n[key] = (index++).toString(36))\r\n    }\r\n}\r\n\r\nvar uniqueIDXML = function(n) {\r\n    return uniqueID(n, true)\r\n}\r\n\r\nvar isArray = Array.isArray || function(object){\r\n    return Object.prototype.toString.call(object) === \"[object Array]\"\r\n}\r\n\r\n// tests\r\n\r\nvar uniqueIndex = 0;\r\n\r\nvar HAS = {\r\n\r\n    GET_ELEMENT_BY_ID: function(test, id){\r\n        id = \"slick_\" + (uniqueIndex++);\r\n        // checks if the document has getElementById, and it works\r\n        test.innerHTML = '<a id=\"' + id + '\"></a>'\r\n        return !!this.getElementById(id)\r\n    },\r\n\r\n    QUERY_SELECTOR: function(test){\r\n        // this supposedly fixes a webkit bug with matchesSelector / querySelector & nth-child\r\n        test.innerHTML = '_<style>:nth-child(2){}</style>'\r\n\r\n        // checks if the document has querySelectorAll, and it works\r\n        test.innerHTML = '<a class=\"MiX\"></a>'\r\n\r\n        return test.querySelectorAll('.MiX').length === 1\r\n    },\r\n\r\n    EXPANDOS: function(test, id){\r\n        id = \"slick_\" + (uniqueIndex++);\r\n        // checks if the document has elements that support expandos\r\n        test._custom_property_ = id\r\n        return test._custom_property_ === id\r\n    },\r\n\r\n    // TODO: use this ?\r\n\r\n    // CHECKED_QUERY_SELECTOR: function(test){\r\n    //\r\n    //     // checks if the document supports the checked query selector\r\n    //     test.innerHTML = '<select><option selected=\"selected\">a</option></select>'\r\n    //     return test.querySelectorAll(':checked').length === 1\r\n    // },\r\n\r\n    // TODO: use this ?\r\n\r\n    // EMPTY_ATTRIBUTE_QUERY_SELECTOR: function(test){\r\n    //\r\n    //     // checks if the document supports the empty attribute query selector\r\n    //     test.innerHTML = '<a class=\"\"></a>'\r\n    //     return test.querySelectorAll('[class*=\"\"]').length === 1\r\n    // },\r\n\r\n    MATCHES_SELECTOR: function(test){\r\n\r\n        test.className = \"MiX\"\r\n\r\n        // checks if the document has matchesSelector, and we can use it.\r\n\r\n        var matches = test.matchesSelector || test.mozMatchesSelector || test.webkitMatchesSelector\r\n\r\n        // if matchesSelector trows errors on incorrect syntax we can use it\r\n        if (matches) try {\r\n            matches.call(test, ':slick')\r\n        } catch(e){\r\n            // just as a safety precaution, also test if it works on mixedcase (like querySelectorAll)\r\n            return matches.call(test, \".MiX\") ? matches : false\r\n        }\r\n\r\n        return false\r\n    },\r\n\r\n    GET_ELEMENTS_BY_CLASS_NAME: function(test){\r\n        test.innerHTML = '<a class=\"f\"></a><a class=\"b\"></a>'\r\n        if (test.getElementsByClassName('b').length !== 1) return false\r\n\r\n        test.firstChild.className = 'b'\r\n        if (test.getElementsByClassName('b').length !== 2) return false\r\n\r\n        // Opera 9.6 getElementsByClassName doesnt detects the class if its not the first one\r\n        test.innerHTML = '<a class=\"a\"></a><a class=\"f b a\"></a>'\r\n        if (test.getElementsByClassName('a').length !== 2) return false\r\n\r\n        // tests passed\r\n        return true\r\n    },\r\n\r\n    // no need to know\r\n\r\n    // GET_ELEMENT_BY_ID_NOT_NAME: function(test, id){\r\n    //     test.innerHTML = '<a name=\"'+ id +'\"></a><b id=\"'+ id +'\"></b>'\r\n    //     return this.getElementById(id) !== test.firstChild\r\n    // },\r\n\r\n    // this is always checked for and fixed\r\n\r\n    // STAR_GET_ELEMENTS_BY_TAG_NAME: function(test){\r\n    //\r\n    //     // IE returns comment nodes for getElementsByTagName('*') for some documents\r\n    //     test.appendChild(this.createComment(''))\r\n    //     if (test.getElementsByTagName('*').length > 0) return false\r\n    //\r\n    //     // IE returns closed nodes (EG:\"</foo>\") for getElementsByTagName('*') for some documents\r\n    //     test.innerHTML = 'foo</foo>'\r\n    //     if (test.getElementsByTagName('*').length) return false\r\n    //\r\n    //     // tests passed\r\n    //     return true\r\n    // },\r\n\r\n    // this is always checked for and fixed\r\n\r\n    // STAR_QUERY_SELECTOR: function(test){\r\n    //\r\n    //     // returns closed nodes (EG:\"</foo>\") for querySelector('*') for some documents\r\n    //     test.innerHTML = 'foo</foo>'\r\n    //     return !!(test.querySelectorAll('*').length)\r\n    // },\r\n\r\n    GET_ATTRIBUTE: function(test){\r\n        // tests for working getAttribute implementation\r\n        var shout = \"fus ro dah\"\r\n        test.innerHTML = '<a class=\"' + shout + '\"></a>'\r\n        return test.firstChild.getAttribute('class') === shout\r\n    }\r\n\r\n}\r\n\r\n// Finder\r\n\r\nvar Finder = function Finder(document){\r\n\r\n    this.document        = document\r\n    var root = this.root = document.documentElement\r\n    this.tested          = {}\r\n\r\n    // uniqueID\r\n\r\n    this.uniqueID = this.has(\"EXPANDOS\") ? uniqueID : uniqueIDXML\r\n\r\n    // getAttribute\r\n\r\n    this.getAttribute = (this.has(\"GET_ATTRIBUTE\")) ? function(node, name){\r\n\r\n        return node.getAttribute(name)\r\n\r\n    } : function(node, name){\r\n\r\n        node = node.getAttributeNode(name)\r\n        return (node && node.specified) ? node.value : null\r\n\r\n    }\r\n\r\n    // hasAttribute\r\n\r\n    this.hasAttribute = (root.hasAttribute) ? function(node, attribute){\r\n\r\n        return node.hasAttribute(attribute)\r\n\r\n    } : function(node, attribute) {\r\n\r\n        node = node.getAttributeNode(attribute)\r\n        return !!(node && node.specified)\r\n\r\n    }\r\n\r\n    // contains\r\n\r\n    this.contains = (document.contains && root.contains) ? function(context, node){\r\n\r\n        return context.contains(node)\r\n\r\n    } : (root.compareDocumentPosition) ? function(context, node){\r\n\r\n        return context === node || !!(context.compareDocumentPosition(node) & 16)\r\n\r\n    } : function(context, node){\r\n\r\n        do {\r\n            if (node === context) return true\r\n        } while ((node = node.parentNode))\r\n\r\n        return false\r\n    }\r\n\r\n    // sort\r\n    // credits to Sizzle (http://sizzlejs.com/)\r\n\r\n    this.sorter = (root.compareDocumentPosition) ? function(a, b){\r\n\r\n        if (!a.compareDocumentPosition || !b.compareDocumentPosition) return 0\r\n        return a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1\r\n\r\n    } : ('sourceIndex' in root) ? function(a, b){\r\n\r\n        if (!a.sourceIndex || !b.sourceIndex) return 0\r\n        return a.sourceIndex - b.sourceIndex\r\n\r\n    } : (document.createRange) ? function(a, b){\r\n\r\n        if (!a.ownerDocument || !b.ownerDocument) return 0\r\n        var aRange = a.ownerDocument.createRange(),\r\n            bRange = b.ownerDocument.createRange()\r\n\r\n        aRange.setStart(a, 0)\r\n        aRange.setEnd(a, 0)\r\n        bRange.setStart(b, 0)\r\n        bRange.setEnd(b, 0)\r\n        return aRange.compareBoundaryPoints(Range.START_TO_END, bRange)\r\n\r\n    } : null\r\n\r\n    this.failed = {}\r\n\r\n    var nativeMatches = this.has(\"MATCHES_SELECTOR\")\r\n\r\n    if (nativeMatches) this.matchesSelector = function(node, expression){\r\n\r\n        if (this.failed[expression]) return null\r\n\r\n        try {\r\n            return nativeMatches.call(node, expression)\r\n        } catch(e){\r\n            if (slick.debug) console.warn(\"matchesSelector failed on \" + expression)\r\n            this.failed[expression] = true\r\n            return null\r\n        }\r\n\r\n    }\r\n\r\n    if (this.has(\"QUERY_SELECTOR\")){\r\n\r\n        this.querySelectorAll = function(node, expression){\r\n\r\n            if (this.failed[expression]) return true\r\n\r\n            var result, _id, _expression, _combinator, _node\r\n\r\n\r\n            // non-document rooted QSA\r\n            // credits to Andrew Dupont\r\n\r\n            if (node !== this.document){\r\n\r\n                _combinator = expression[0].combinator\r\n\r\n                _id         = node.getAttribute(\"id\")\r\n                _expression = expression\r\n\r\n                if (!_id){\r\n                    _node = node\r\n                    _id = \"__slick__\"\r\n                    _node.setAttribute(\"id\", _id)\r\n                }\r\n\r\n                expression = \"#\" + _id + \" \" + _expression\r\n\r\n\r\n                // these combinators need a parentNode due to how querySelectorAll works, which is:\r\n                // finding all the elements that match the given selector\r\n                // then filtering by the ones that have the specified element as an ancestor\r\n                if (_combinator.indexOf(\"~\") > -1 || _combinator.indexOf(\"+\") > -1){\r\n\r\n                    node = node.parentNode\r\n                    if (!node) result = true\r\n                    // if node has no parentNode, we return \"true\" as if it failed, without polluting the failed cache\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (!result) try {\r\n                result = node.querySelectorAll(expression.toString())\r\n            } catch(e){\r\n                if (slick.debug) console.warn(\"querySelectorAll failed on \" + (_expression || expression))\r\n                result = this.failed[_expression || expression] = true\r\n            }\r\n\r\n            if (_node) _node.removeAttribute(\"id\")\r\n\r\n            return result\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nFinder.prototype.has = function(FEATURE){\r\n\r\n    var tested        = this.tested,\r\n        testedFEATURE = tested[FEATURE]\r\n\r\n    if (testedFEATURE != null) return testedFEATURE\r\n\r\n    var root     = this.root,\r\n        document = this.document,\r\n        testNode = document.createElement(\"div\")\r\n\r\n    testNode.setAttribute(\"style\", \"display: none;\")\r\n\r\n    root.appendChild(testNode)\r\n\r\n    var TEST = HAS[FEATURE], result = false\r\n\r\n    if (TEST) try {\r\n        result = TEST.call(document, testNode)\r\n    } catch(e){}\r\n\r\n    if (slick.debug && !result) console.warn(\"document has no \" + FEATURE)\r\n\r\n    root.removeChild(testNode)\r\n\r\n    return tested[FEATURE] = result\r\n\r\n}\r\n\r\nvar combinators = {\r\n\r\n    \" \": function(node, part, push){\r\n\r\n        var item, items\r\n\r\n        var noId = !part.id, noTag = !part.tag, noClass = !part.classes\r\n\r\n        if (part.id && node.getElementById && this.has(\"GET_ELEMENT_BY_ID\")){\r\n            item = node.getElementById(part.id)\r\n\r\n            // return only if id is found, else keep checking\r\n            // might be a tad slower on non-existing ids, but less insane\r\n\r\n            if (item && item.getAttribute('id') === part.id){\r\n                items = [item]\r\n                noId = true\r\n                // if tag is star, no need to check it in match()\r\n                if (part.tag === \"*\") noTag = true\r\n            }\r\n        }\r\n\r\n        if (!items){\r\n\r\n            if (part.classes && node.getElementsByClassName && this.has(\"GET_ELEMENTS_BY_CLASS_NAME\")){\r\n                items = node.getElementsByClassName(part.classList)\r\n                noClass = true\r\n                // if tag is star, no need to check it in match()\r\n                if (part.tag === \"*\") noTag = true\r\n            } else {\r\n                items = node.getElementsByTagName(part.tag)\r\n                // if tag is star, need to check it in match because it could select junk, boho\r\n                if (part.tag !== \"*\") noTag = true\r\n            }\r\n\r\n            if (!items || !items.length) return false\r\n\r\n        }\r\n\r\n        for (var i = 0; item = items[i++];)\r\n            if ((noTag && noId && noClass && !part.attributes && !part.pseudos) || this.match(item, part, noTag, noId, noClass))\r\n                push(item)\r\n\r\n        return true\r\n\r\n    },\r\n\r\n    \">\": function(node, part, push){ // direct children\r\n        if ((node = node.firstChild)) do {\r\n            if (node.nodeType == 1 && this.match(node, part)) push(node)\r\n        } while ((node = node.nextSibling))\r\n    },\r\n\r\n    \"+\": function(node, part, push){ // next sibling\r\n        while ((node = node.nextSibling)) if (node.nodeType == 1){\r\n            if (this.match(node, part)) push(node)\r\n            break\r\n        }\r\n    },\r\n\r\n    \"^\": function(node, part, push){ // first child\r\n        node = node.firstChild\r\n        if (node){\r\n            if (node.nodeType === 1){\r\n                if (this.match(node, part)) push(node)\r\n            } else {\r\n                combinators['+'].call(this, node, part, push)\r\n            }\r\n        }\r\n    },\r\n\r\n    \"~\": function(node, part, push){ // next siblings\r\n        while ((node = node.nextSibling)){\r\n            if (node.nodeType === 1 && this.match(node, part)) push(node)\r\n        }\r\n    },\r\n\r\n    \"++\": function(node, part, push){ // next sibling and previous sibling\r\n        combinators['+'].call(this, node, part, push)\r\n        combinators['!+'].call(this, node, part, push)\r\n    },\r\n\r\n    \"~~\": function(node, part, push){ // next siblings and previous siblings\r\n        combinators['~'].call(this, node, part, push)\r\n        combinators['!~'].call(this, node, part, push)\r\n    },\r\n\r\n    \"!\": function(node, part, push){ // all parent nodes up to document\r\n        while ((node = node.parentNode)) if (node !== this.document && this.match(node, part)) push(node)\r\n    },\r\n\r\n    \"!>\": function(node, part, push){ // direct parent (one level)\r\n        node = node.parentNode\r\n        if (node !== this.document && this.match(node, part)) push(node)\r\n    },\r\n\r\n    \"!+\": function(node, part, push){ // previous sibling\r\n        while ((node = node.previousSibling)) if (node.nodeType == 1){\r\n            if (this.match(node, part)) push(node)\r\n            break\r\n        }\r\n    },\r\n\r\n    \"!^\": function(node, part, push){ // last child\r\n        node = node.lastChild\r\n        if (node){\r\n            if (node.nodeType == 1){\r\n                if (this.match(node, part)) push(node)\r\n            } else {\r\n                combinators['!+'].call(this, node, part, push)\r\n            }\r\n        }\r\n    },\r\n\r\n    \"!~\": function(node, part, push){ // previous siblings\r\n        while ((node = node.previousSibling)){\r\n            if (node.nodeType === 1 && this.match(node, part)) push(node)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nFinder.prototype.search = function(context, expression, found){\r\n\r\n    if (!context) context = this.document\r\n    else if (!context.nodeType && context.document) context = context.document\r\n\r\n    var expressions = parse(expression)\r\n\r\n    // no expressions were parsed. todo: is this really necessary?\r\n    if (!expressions || !expressions.length) throw new Error(\"invalid expression\")\r\n\r\n    if (!found) found = []\r\n\r\n    var uniques, push = isArray(found) ? function(node){\r\n        found[found.length] = node\r\n    } : function(node){\r\n        found[found.length++] = node\r\n    }\r\n\r\n    // if there is more than one expression we need to check for duplicates when we push to found\r\n    // this simply saves the old push and wraps it around an uid dupe check.\r\n    if (expressions.length > 1){\r\n        uniques = {}\r\n        var plush = push\r\n        push = function(node){\r\n            var uid = uniqueID(node)\r\n            if (!uniques[uid]){\r\n                uniques[uid] = true\r\n                plush(node)\r\n            }\r\n        }\r\n    }\r\n\r\n    // walker\r\n\r\n    var node, nodes, part\r\n\r\n    main: for (var i = 0; expression = expressions[i++];){\r\n\r\n        // querySelector\r\n\r\n        // TODO: more functional tests\r\n\r\n        // if there is querySelectorAll (and the expression does not fail) use it.\r\n        if (!slick.noQSA && this.querySelectorAll){\r\n\r\n            nodes = this.querySelectorAll(context, expression)\r\n            if (nodes !== true){\r\n                if (nodes && nodes.length) for (var j = 0; node = nodes[j++];) if (node.nodeName > '@'){\r\n                    push(node)\r\n                }\r\n                continue main\r\n            }\r\n        }\r\n\r\n        // if there is only one part in the expression we don't need to check each part for duplicates.\r\n        // todo: this might be too naive. while solid, there can be expression sequences that do not\r\n        // produce duplicates. \"body div\" for instance, can never give you each div more than once.\r\n        // \"body div a\" on the other hand might.\r\n        if (expression.length === 1){\r\n\r\n            part = expression[0]\r\n            combinators[part.combinator].call(this, context, part, push)\r\n\r\n        } else {\r\n\r\n            var cs = [context], c, f, u, p = function(node){\r\n                var uid = uniqueID(node)\r\n                if (!u[uid]){\r\n                    u[uid] = true\r\n                    f[f.length] = node\r\n                }\r\n            }\r\n\r\n            // loop the expression parts\r\n            for (var j = 0; part = expression[j++];){\r\n                f = []; u = {}\r\n                // loop the contexts\r\n                for (var k = 0; c = cs[k++];) combinators[part.combinator].call(this, c, part, p)\r\n                // nothing was found, the expression failed, continue to the next expression.\r\n                if (!f.length) continue main\r\n                cs = f // set the contexts for future parts (if any)\r\n            }\r\n\r\n            if (i === 0) found = f // first expression. directly set found.\r\n            else for (var l = 0; l < f.length; l++) push(f[l]) // any other expression needs to push to found.\r\n        }\r\n\r\n    }\r\n\r\n    if (uniques && found && found.length > 1) this.sort(found)\r\n\r\n    return found\r\n\r\n}\r\n\r\nFinder.prototype.sort = function(nodes){\r\n    return this.sorter ? Array.prototype.sort.call(nodes, this.sorter) : nodes\r\n}\r\n\r\n// TODO: most of these pseudo selectors include <html> and qsa doesnt. fixme.\r\n\r\nvar pseudos = {\r\n\r\n\r\n    // TODO: returns different results than qsa empty.\r\n\r\n    'empty': function(){\r\n        return !(this && this.nodeType === 1) && !(this.innerText || this.textContent || '').length\r\n    },\r\n\r\n    'not': function(expression){\r\n        return !slick.matches(this, expression)\r\n    },\r\n\r\n    'contains': function(text){\r\n        return (this.innerText || this.textContent || '').indexOf(text) > -1\r\n    },\r\n\r\n    'first-child': function(){\r\n        var node = this\r\n        while ((node = node.previousSibling)) if (node.nodeType == 1) return false\r\n        return true\r\n    },\r\n\r\n    'last-child': function(){\r\n        var node = this\r\n        while ((node = node.nextSibling)) if (node.nodeType == 1) return false\r\n        return true\r\n    },\r\n\r\n    'only-child': function(){\r\n        var prev = this\r\n        while ((prev = prev.previousSibling)) if (prev.nodeType == 1) return false\r\n\r\n        var next = this\r\n        while ((next = next.nextSibling)) if (next.nodeType == 1) return false\r\n\r\n        return true\r\n    },\r\n\r\n    'first-of-type': function(){\r\n        var node = this, nodeName = node.nodeName\r\n        while ((node = node.previousSibling)) if (node.nodeName == nodeName) return false\r\n        return true\r\n    },\r\n\r\n    'last-of-type': function(){\r\n        var node = this, nodeName = node.nodeName\r\n        while ((node = node.nextSibling)) if (node.nodeName == nodeName) return false\r\n        return true\r\n    },\r\n\r\n    'only-of-type': function(){\r\n        var prev = this, nodeName = this.nodeName\r\n        while ((prev = prev.previousSibling)) if (prev.nodeName == nodeName) return false\r\n        var next = this\r\n        while ((next = next.nextSibling)) if (next.nodeName == nodeName) return false\r\n        return true\r\n    },\r\n\r\n    'enabled': function(){\r\n        return !this.disabled\r\n    },\r\n\r\n    'disabled': function(){\r\n        return this.disabled\r\n    },\r\n\r\n    'checked': function(){\r\n        return this.checked || this.selected\r\n    },\r\n\r\n    'selected': function(){\r\n        return this.selected\r\n    },\r\n\r\n    'focus': function(){\r\n        var doc = this.ownerDocument\r\n        return doc.activeElement === this && (this.href || this.type || slick.hasAttribute(this, 'tabindex'))\r\n    },\r\n\r\n    'root': function(){\r\n        return (this === this.ownerDocument.documentElement)\r\n    }\r\n\r\n}\r\n\r\nFinder.prototype.match = function(node, bit, noTag, noId, noClass){\r\n\r\n    // TODO: more functional tests ?\r\n\r\n    if (!slick.noQSA && this.matchesSelector){\r\n        var matches = this.matchesSelector(node, bit)\r\n        if (matches !== null) return matches\r\n    }\r\n\r\n    // normal matching\r\n\r\n    if (!noTag && bit.tag){\r\n\r\n        var nodeName = node.nodeName.toLowerCase()\r\n        if (bit.tag === \"*\"){\r\n            if (nodeName < \"@\") return false\r\n        } else if (nodeName != bit.tag){\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    if (!noId && bit.id && node.getAttribute('id') !== bit.id) return false\r\n\r\n    var i, part\r\n\r\n    if (!noClass && bit.classes){\r\n\r\n        var className = this.getAttribute(node, \"class\")\r\n        if (!className) return false\r\n\r\n        for (part in bit.classes) if (!RegExp('(^|\\\\s)' + bit.classes[part] + '(\\\\s|$)').test(className)) return false\r\n    }\r\n\r\n    var name, value\r\n\r\n    if (bit.attributes) for (i = 0; part = bit.attributes[i++];){\r\n\r\n        var operator  = part.operator,\r\n            escaped   = part.escapedValue\r\n\r\n        name  = part.name\r\n        value = part.value\r\n\r\n        if (!operator){\r\n\r\n            if (!this.hasAttribute(node, name)) return false\r\n\r\n        } else {\r\n\r\n            var actual = this.getAttribute(node, name)\r\n            if (actual == null) return false\r\n\r\n            switch (operator){\r\n                case '^=' : if (!RegExp(      '^' + escaped            ).test(actual)) return false; break\r\n                case '$=' : if (!RegExp(            escaped + '$'      ).test(actual)) return false; break\r\n                case '~=' : if (!RegExp('(^|\\\\s)' + escaped + '(\\\\s|$)').test(actual)) return false; break\r\n                case '|=' : if (!RegExp(      '^' + escaped + '(-|$)'  ).test(actual)) return false; break\r\n\r\n                case '='  : if (actual !== value) return false; break\r\n                case '*=' : if (actual.indexOf(value) === -1) return false; break\r\n                default   : return false\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    if (bit.pseudos) for (i = 0; part = bit.pseudos[i++];){\r\n\r\n        name  = part.name\r\n        value = part.value\r\n\r\n        if (pseudos[name]) return pseudos[name].call(node, value)\r\n\r\n        if (value != null){\r\n            if (this.getAttribute(node, name) !== value) return false\r\n        } else {\r\n            if (!this.hasAttribute(node, name)) return false\r\n        }\r\n\r\n    }\r\n\r\n    return true\r\n\r\n}\r\n\r\nFinder.prototype.matches = function(node, expression){\r\n\r\n    var expressions = parse(expression)\r\n\r\n    if (expressions.length === 1 && expressions[0].length === 1){ // simplest match\r\n        return this.match(node, expressions[0][0])\r\n    }\r\n\r\n    // TODO: more functional tests ?\r\n\r\n    if (!slick.noQSA && this.matchesSelector){\r\n        var matches = this.matchesSelector(node, expressions)\r\n        if (matches !== null) return matches\r\n    }\r\n\r\n    var nodes = this.search(this.document, expression, {length: 0})\r\n\r\n    for (var i = 0, res; res = nodes[i++];) if (node === res) return true\r\n    return false\r\n\r\n}\r\n\r\nvar finders = {}\r\n\r\nvar finder = function(context){\r\n    var doc = context || document\r\n    if (doc.ownerDocument) doc = doc.ownerDocument\r\n    else if (doc.document) doc = doc.document\r\n\r\n    if (doc.nodeType !== 9) throw new TypeError(\"invalid document\")\r\n\r\n    var uid = uniqueID(doc)\r\n    return finders[uid] || (finders[uid] = new Finder(doc))\r\n}\r\n\r\n// ... API ...\r\n\r\nvar slick = function(expression, context){\r\n    return slick.search(expression, context)\r\n}\r\n\r\nslick.search = function(expression, context, found){\r\n    return finder(context).search(context, expression, found)\r\n}\r\n\r\nslick.find = function(expression, context){\r\n    return finder(context).search(context, expression)[0] || null\r\n}\r\n\r\nslick.getAttribute = function(node, name){\r\n    return finder(node).getAttribute(node, name)\r\n}\r\n\r\nslick.hasAttribute = function(node, name){\r\n    return finder(node).hasAttribute(node, name)\r\n}\r\n\r\nslick.contains = function(context, node){\r\n    return finder(context).contains(context, node)\r\n}\r\n\r\nslick.matches = function(node, expression){\r\n    return finder(node).matches(node, expression)\r\n}\r\n\r\nslick.sort = function(nodes){\r\n    if (nodes && nodes.length > 1) finder(nodes[0]).sort(nodes)\r\n    return nodes\r\n}\r\n\r\nslick.parse = parse;\r\n\r\n// slick.debug = true\r\n// slick.noQSA  = true\r\n\r\nmodule.exports = slick\r\n"}